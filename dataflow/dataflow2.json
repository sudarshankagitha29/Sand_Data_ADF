{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText25",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText26",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText27",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpID as short,",
				"          EmpName as string,",
				"          DeptID as integer,",
				"          Salary as integer,",
				"          JoinDate as date,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmpID as short,",
				"          EmpName as string,",
				"          DeptID as integer,",
				"          Salary as integer,",
				"          JoinDate as date,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 filter(and(greaterOrEqual(Salary,60000),isNull(DeptID)==false())) ~> filter1",
				"filter1 sort(desc(Salary, false)) ~> sort1",
				"sort1 derive(sink = iif(Salary >= 90000, 'High',     iif(Salary >= 70000, 'Medium', 'Low'))) ~> derivedColumn2",
				"derivedColumn2, source2 join(source1@DeptID == source2@DeptID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          EmpID = source1@EmpID,",
				"          EmpName = source1@EmpName,",
				"          DeptID = source1@DeptID,",
				"          Salary = source1@Salary,",
				"          JoinDate = source1@JoinDate,",
				"          Location = source1@Location,",
				"          sink,",
				"          EmpID = source2@EmpID,",
				"          EmpName = source2@EmpName,",
				"          DeptID = source2@DeptID,",
				"          Salary = source2@Salary,",
				"          JoinDate = source2@JoinDate,",
				"          Location = source2@Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          airline_id as string,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}