{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText42",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText43",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText44",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText45",
						"type": "DatasetReference"
					},
					"name": "product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText46",
						"type": "DatasetReference"
					},
					"name": "category"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText50",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleID as string,",
				"          StoreID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          SaleID as string,",
				"          StoreID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          SaleID as string,",
				"          StoreID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          ProductID as string,",
				"          ProductName as string,",
				"          CategoryID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> product",
				"source(output(",
				"          CategoryID as string,",
				"          CategoryName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> category",
				"source1, source2, source3 union(byName: true)~> union1",
				"union1 filter(!isNull(SaleID) && greaterOrEqual(toInteger(Quantity),0) && !isNull(Amount)) ~> filter1",
				"filter1, product join(union1@ProductID == product@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, category join(product@CategoryID == category@CategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"alterRow1 select(mapColumn(",
				"          SaleID,",
				"          StoreID,",
				"          ProductID = union1@ProductID,",
				"          SaleDate,",
				"          Quantity,",
				"          Amount,",
				"          ProductID = product@ProductID,",
				"          ProductName,",
				"          CategoryID = product@CategoryID,",
				"          CategoryID = category@CategoryID,",
				"          CategoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 pivot(groupBy(ProductID),",
				"     pivotBy(ProductName),",
				"     {} = sum(toInteger(Amount)),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"join3 alterRow(upsertIf(1==1)) ~> alterRow1",
				"pivot1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          airline_id as string,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}