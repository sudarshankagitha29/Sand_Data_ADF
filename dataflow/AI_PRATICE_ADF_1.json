{
	"name": "AI_PRATICE_ADF_1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText34",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText38",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText39",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText40",
						"type": "DatasetReference"
					},
					"name": "product"
				},
				{
					"dataset": {
						"referenceName": "Category",
						"type": "DatasetReference"
					},
					"name": "category"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText41",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleID as string,",
				"          StoreID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          SaleID as string,",
				"          StoreID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          SaleID as string,",
				"          StoreID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          Amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          ProductID as string,",
				"          ProductName as string,",
				"          CategoryID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> product",
				"source(output(",
				"          CategoryID as string,",
				"          CategoryName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> category",
				"source1, source2, source3 union(byName: true)~> union1",
				"union1 filter(!isNull(SaleID) && greaterOrEqual(toInteger(Quantity),0) && !isNull(Amount)) ~> filter1",
				"filter1 sort(asc(Amount, true)) ~> sort1",
				"sort1, product join(union1@ProductID == product@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, category join(product@CategoryID == category@CategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 aggregate(groupBy(union1@ProductID,",
				"          product@CategoryID,",
				"          SaleDate),",
				"     Quantity = sum(toInteger(Quantity)),",
				"          Amount = sum(toInteger(Amount))) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}